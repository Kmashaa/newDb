--Task1

--create users and tables
alter session set "_ORACLE_SCRIPT"=true;

create user development identified by development;
grant all privileges to development;
drop user development;

create user production identified by production;
grant all privileges to production;
drop user production;


create table development.MyTable
(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    val number,
    my_dev_table_id NUMBER,
    constraint mytable_pk primary key(id)
);

create table development.MyDevTable(
    id number generated by default as identity,
    val number,
    my_table_id number,
    constraint mydevtabel_pk primary key(id),
    constraint fk_my_table foreign key (my_table_id) references MYTABLE(id)
);

alter table DEVELOPMENT.MYTABLE add constraint fk_my_dev_table foreign key (my_dev_table_id ) references MYDEVTABLE(id);

create table PRODUCTION.MyTable
(
    id number generated by default as identity,
    val number,
    my_dev_table_id number,
    constraint mytable_pk primary key(id)
);


--compare tables by name
SELECT TABLE_NAME FROM ALL_TABLES WHERE OWNER = 'DEVELOPMENT' AND TABLE_NAME NOt IN (
SELECT TABLE_NAME FROM All_TABLES WHERE OWNER = 'PRODUCTION');

CREATE OR REPLACE FUNCTION development.table_exists(scheme_name IN VARCHAR, tab_name IN VARCHAR) RETURN BOOLEAN
IS
    num NUMBER;
BEGIN
    SELECT COUNT(TABLE_NAME) INTO num FROM ALL_TABLES WHERE OWNER = UPPER(scheme_name) AND TABLE_NAME = UPPER(tab_name);
    IF num > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END;
call compare_schemes('DEVELOPMENT','PRODUCTION');
call compare_tables('DEVELOPMENT', 'PRODUCTION');

CREATE OR REPLACE PROCEDURE compare_schemes(dev_scheme_name IN VARCHAR2, prod_scheme_name IN VARCHAR2)
IS
    CURSOR get_table_name IS
    SELECT TABLE_NAME FROM ALL_TABLES
    WHERE OWNER = UPPER(dev_scheme_name);
BEGIN
    FOR table_name IN get_table_name LOOP
        IF NOT table_exists(prod_scheme_name, table_name.TABLE_NAME) THEN
            DBMS_OUTPUT.PUT_LINE('Add table ' || table_name.TABLE_NAME||';');

            INSERT INTO TABLES_TO_CREATE(owner, table_name)
            VALUES(dev_scheme_name, table_name.TABLE_NAME);
        ELSE
            compare_table_structure(dev_scheme_name, prod_scheme_name, table_name.TABLE_NAME);
        END IF;
    END LOOP;
    create_all_tables(dev_scheme_name);
END;

call compare_schemes('DEVELOPMENT', 'PRODUCTION');


--compare tables by structure
SELECT CONSTRAINT_NAME FROM ALL_CONS_COLUMNS WHERE OWNER = 'DEVELOPMENT' AND TABLE_NAME = 'MYTABLE' AND (COLUMN_NAME = 'ID' OR COLUMN_NAME ='MY_DEV_TABLE_ID');
select * from ALL_CONSTRAINTS;

SELECT * FROM(
    (SELECT CONSTRAINT_NAME FROM ALL_CONS_COLUMNS WHERE OWNER = 'DEVELOPMENT'
    AND TABLE_NAME = 'MYTABLE' AND COLUMN_NAME = 'MY_DEV_TABLE_ID'));

CREATE OR REPLACE FUNCTION get_inline_constraint_description(scheme_name IN VARCHAR2, tab_name IN VARCHAR2, col_name IN VARCHAR2) RETURN VARCHAR2
IS
CURSOR cur_get_inl_constraint IS
SELECT * FROM(
    (SELECT CONSTRAINT_NAME FROM ALL_CONS_COLUMNS WHERE OWNER = UPPER(scheme_name)
    AND TABLE_NAME = UPPER(tab_name) AND COLUMN_NAME = UPPER(col_name)) l
INNER JOIN
(SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, SEARCH_CONDITION FROM ALL_CONSTRAINTS
WHERE OWNER = UPPER(scheme_name) AND TABLE_NAME = UPPER(tab_name) AND GENERATED = 'GENERATED NAME') r
ON l.CONSTRAINT_NAME = r.CONSTRAINT_NAME);
constr_description VARCHAR2(300);
BEGIN
     FOR rec IN  cur_get_inl_constraint LOOP
        CASE rec.CONSTRAINT_TYPE
            WHEN 'P' THEN constr_description := constr_description || ' PRIMARY KEY';
            WHEN 'U' THEN constr_description := constr_description ||' UNIQUE';
            WHEN 'C' THEN
                IF rec.SEARCH_CONDITION NOT LIKE '% IS NOT NULL' THEN
                    constr_description := constr_description || ' CHECK(' || rec.SEARCH_CONDITION || ')';
                END IF;
            ELSE NULL;
        END CASE;
    END LOOP;
RETURN constr_description;
end;

CREATE OR REPLACE FUNCTION get_sequence_description(scheme_name IN VARCHAR2, seq_name IN VARCHAR2) RETURN VARCHAR2
IS
min_val NUMBER;
max_val NUMBER;
inc_by NUMBER;
gen_type VARCHAR2(10);
seq_description VARCHAR2(300);
BEGIN
    SELECT MIN_VALUE, MAX_VALUE, INCREMENT_BY INTO min_val, max_val, inc_by FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = seq_name AND SEQUENCE_OWNER = UPPER(scheme_name);
    SELECT GENERATION_TYPE INTO gen_type FROM ALL_TAB_IDENTITY_COLS WHERE SEQUENCE_NAME = seq_name AND OWNER = UPPER(scheme_name);
    -- It makes no difference how to do this or the following.
    -- seq_description := 'GENERATED ' || gen_type || ' AS IDENTITY' || ' START WITH ' || min_val || ' INCREMENT BY ' || inc_by || ' MAXVALUE ' || max_val;

    seq_description := 'GENERATED ' || gen_type || ' AS IDENTITY';
    IF min_val != 1 THEN
        seq_description := seq_description || ' START WITH ' || min_val;
    END IF;
    IF inc_by != 1 THEN
        seq_description := seq_description || ' INCREMENT BY ' || inc_by;
    END IF;
    IF max_val != 9999999999999999999999999999 THEN
        seq_description := seq_description || ' MAXVALUE ' || max_val;
    END IF;
    RETURN seq_description;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        BEGIN
            DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND in get_sequence_description()');
            RETURN NULL;
        END;
    WHEN OTHERS THEN
        BEGIN
            DBMS_OUTPUT.PUT_LINE('Unknown error in get_sequence_description()');
            RETURN NULL;
        END;
END;

CREATE OR REPLACE FUNCTION get_col_description(scheme_name IN VARCHAR2, tab_name IN VARCHAR2, col_name IN VARCHAR2) RETURN VARCHAR2
IS
dat_type VARCHAR2(128);
is_nullable VARCHAR2(1);
dat_default LONG;
dat_precision NUMBER;
dat_scale NUMBER;
ch_length NUMBER;
col_description VARCHAR2(500) := '';
is_comma_needed NUMBER := 0;
BEGIN
    SELECT DATA_TYPE, NULLABLE, DATA_DEFAULT, DATA_PRECISION, DATA_SCALE, CHAR_LENGTH INTO
    dat_type, is_nullable, dat_default, dat_precision, dat_scale, ch_length
    FROM ALL_TAB_COLUMNS
    WHERE OWNER = UPPER(scheme_name) AND TABLE_NAME = UPPER(tab_name) AND COLUMN_NAME = UPPER(col_name);

    col_description := UPPER(col_name) || ' ' || dat_type;

    -- If precision or scale is set.
    IF dat_precision IS NOT NULL or dat_scale IS NOT NULL THEN
        col_description := col_description || '(';
        IF dat_precision IS NOT NULL THEN
                col_description := col_description || dat_precision;
                is_comma_needed := 1;
        END IF;

        IF dat_scale IS NOT NULL THEN
            IF is_comma_needed = 1 THEN
                col_description := col_description || ', ';
            END IF;
            col_description := col_description || dat_scale || ')';
        END IF;
    END IF;

    -- For CHAR, VARCHAR2, NCHAR, NVARCHAR2.
    IF ch_length > 0 THEN
        col_description := col_description || '(' || ch_length || ')';
    END IF;

    IF dat_default IS NOT NULL THEN
            IF dat_default LIKE '%.nextval' THEN
                col_description := col_description || ' ' || get_sequence_description(scheme_name, REGEXP_SUBSTR (dat_default, '(ISEQ\$\$_\d+)'));
            ELSE
                col_description := col_description || ' DEFAULT ' || dat_default;
            END IF;
    END IF;

    col_description := col_description || get_inline_constraint_description(scheme_name, tab_name, col_name);

    IF is_nullable = 'N' THEN
        col_description := col_description || ' NOT NULL';
    END IF;

    RETURN col_description;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        BEGIN
            DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND in get_col_description()');
            RETURN NULL;
        END;
    WHEN OTHERS THEN
        BEGIN
            DBMS_OUTPUT.PUT_LINE('Unknown error in get_col_description()');
            RETURN NULL;
        END;
END;


CREATE OR REPLACE PROCEDURE compare_table_structure(dev_scheme_name IN VARCHAR2, prod_scheme_name IN VARCHAR2, tab_name IN VARCHAR2)
IS
CURSOR cur_get_columns IS
SELECT * FROM
((SELECT COLUMN_NAME dev_col_name FROM ALL_TAB_COLUMNS
WHERE OWNER = UPPER(dev_scheme_name) AND TABLE_NAME = UPPER(tab_name)) dev
FULL OUTER JOIN
(SELECT COLUMN_NAME prod_col_name FROM ALL_TAB_COLUMNS
WHERE OWNER = UPPER(prod_scheme_name) AND TABLE_NAME = UPPER(tab_name)) prod
ON dev.dev_col_name = prod.prod_col_name);
BEGIN
FOR rec IN cur_get_columns LOOP
    IF rec.dev_col_name IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || tab_name || ' DROP COLUMN ' || rec.prod_col_name || ';');
    ELSIF rec.prod_col_name IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || tab_name || ' ADD COLUMN ' || rec.dev_col_name || ';');
    ELSIF get_col_description(dev_scheme_name, tab_name, rec.dev_col_name) != get_col_description(prod_scheme_name, tab_name, rec.prod_col_name) THEN
        DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || tab_name || ' MODIFY ' || get_col_description(dev_scheme_name, tab_name, rec.dev_col_name) || ';');
    END IF;
END LOOP;
END;

SELECT get_col_description('DEVELOPMENT', 'MYDEVTABLE', 'ID') FROM dual;

call compare_table_structure('DEVELOPMENT','PRODUCTION','MYDEVTABLE');


CREATE TABLE TABLES_TO_CREATE(
    tables_to_create_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    owner VARCHAR2(128),
    table_name VARCHAR2(128),
    lvl NUMBER DEFAULT 0,
    is_cycle NUMBER DEFAULT 0,
    fk_name VARCHAR2(128),
    path VARCHAR2(500)
);

CREATE OR REPLACE FUNCTION is_table_exists_in_tables_to_create(tab_name IN VARCHAR2) RETURN BOOLEAN
IS
    num NUMBER;
BEGIN
    SELECT DISTINCT COUNT(TABLE_NAME) INTO num FROM tables_to_create WHERE TABLE_NAME = UPPER(tab_name);
    IF num > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END is_table_exists_in_tables_to_create;



CREATE OR REPLACE PROCEDURE update_tables_to_create(schema_name IN VARCHAR2)
IS
    CURSOR cur_get_table IS
    SELECT level, CONNECT_BY_ISCYCLE is_cycle, parent_owner, parent_table, child_owner, child_table, constr_name, SYS_CONNECT_BY_PATH(parent_table, '<-') cycle_path
    FROM (SELECT pk.OWNER parent_owner, pk.TABLE_NAME parent_table, fk.OWNER child_owner, fk.TABLE_NAME child_table, fk.CONSTRAINT_NAME constr_name
            FROM ALL_CONSTRAINTS pk
            INNER JOIN ALL_CONSTRAINTS fk
            ON pk.OWNER = fk.R_OWNER AND pk.CONSTRAINT_NAME = fk.R_CONSTRAINT_NAME
            WHERE pk.OWNER = UPPER(schema_name))
    CONNECT BY NOCYCLE PRIOR child_table = parent_table;
    tmp_lvl NUMBER := 0;
BEGIN
    FOR rec in cur_get_table LOOP
        IF rec.is_cycle = 1 THEN
            UPDATE TABLES_TO_CREATE SET owner = rec.child_owner, lvl = rec.level,
            is_cycle = rec.is_cycle, fk_name = rec.constr_name, path = rec.cycle_path
            WHERE table_name = rec.child_table;
            CONTINUE;
        END IF;

        IF NOT is_table_exists_in_tables_to_create(rec.child_table) THEN
            CONTINUE;
        END IF;

        SELECT lvl INTO tmp_lvl FROM TABLES_TO_CREATE WHERE table_name = rec.child_table;
        IF rec.level > tmp_lvl THEN
            UPDATE TABLES_TO_CREATE SET owner = rec.child_owner, lvl = rec.level,
            is_cycle = rec.is_cycle, fk_name = rec.constr_name, path = rec.cycle_path
            WHERE table_name = rec.child_table;
        END IF;
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND in update_tables_to_create()');
    WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Unknown error in update_tables_to_create()');
END update_tables_to_create;


CREATE OR REPLACE PROCEDURE create_table(schema_name IN VARCHAR2, tab_name IN VARCHAR2, is_create_fk_constr IN NUMBER)
IS
    CURSOR cur_get_col IS
    SELECT COLUMN_NAME FROM ALL_TAB_COLUMNS
    WHERE OWNER = UPPER(schema_name) AND TABLE_NAME = UPPER(tab_name);
    buff VARCHAR2(5000);
    outline_constr_buff VARCHAR2(3000);
BEGIN
     buff := 'CREATE TABLE ' || tab_name || ' (' || CHR(10);
    FOR rec in cur_get_col LOOP
        buff := buff || get_col_description(schema_name, tab_name, rec.COLUMN_NAME) || ',' || CHR(10);
    END LOOP;
    outline_constr_buff := get_outline_constraints_description(schema_name, tab_name, is_create_fk_constr);
     IF outline_constr_buff IS NULL THEN
        buff := RTRIM(buff, ',' || CHR(10));
    ELSE
        buff := buff || outline_constr_buff;
    END IF;
    buff := buff || ');';
    DBMS_OUTPUT.PUT_LINE(buff);
END create_table;


CREATE OR REPLACE PROCEDURE create_all_tables(schema_name IN VARCHAR2)
IS
is_create_fk_constr NUMBER;
BEGIN
    update_tables_to_create(schema_name);

    FOR rec in (SELECT * FROM TABLES_TO_CREATE ORDER BY lvl) LOOP
        IF rec.is_cycle = 1 THEN
            is_create_fk_constr := 0;
        ELSE
            is_create_fk_constr := 1;
        END IF;
        create_table(schema_name, rec.table_name, is_create_fk_constr);
    END LOOP;


    FOR rec in (SELECT * FROM TABLES_TO_CREATE WHERE is_cycle = 1) LOOP
        DBMS_OUTPUT.PUT_LINE('Cycle: ' || rec.path);
        DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || rec.table_name || ' ADD' ||  CHR(10) || get_fk_description(schema_name, rec.fk_name) || ';');
    END LOOP;
END create_all_tables;


SELECT get_fk_description('DEVELOPMENT', 'FK_MY_TABLE') FROM dual;

CREATE OR REPLACE FUNCTION get_fk_description(schema_name IN VARCHAR2, constr_name IN VARCHAR2) RETURN VARCHAR2
IS
    buff VARCHAR2(1000) := 0;

    CURSOR cur_get_col(owner_name VARCHAR2, cons_name VARCHAR2) IS
    SELECT TABLE_NAME, COLUMN_NAME FROM ALL_CONS_COLUMNS
    WHERE OWNER = UPPER(owner_name) AND CONSTRAINT_NAME = UPPER(cons_name)
    ORDER BY POSITION;

    r_schema VARCHAR2(128);
    r_constr_name VARCHAR(128);
    del_rule VARCHAR2(9);

    is_write_table_name NUMBER := 1;
BEGIN
    SELECT R_OWNER, R_CONSTRAINT_NAME, DELETE_RULE INTO r_schema, r_constr_name, del_rule FROM ALL_CONSTRAINTS
    WHERE OWNER = UPPER(schema_name) AND CONSTRAINT_NAME = UPPER(constr_name) AND CONSTRAINT_TYPE = 'R'
    FETCH FIRST 1 ROWS ONLY;

    buff := 'CONSTRAINT ' || constr_name || ' FOREIGN KEY(';

    FOR rec IN cur_get_col(schema_name, constr_name) LOOP
        buff := buff || rec.COLUMN_NAME || ', ';
    END LOOP;
    buff := RTRIM(buff, ', ');
    buff := buff || ') REFERENCES ';

    FOR rec IN cur_get_col(r_schema, r_constr_name) LOOP
        IF is_write_table_name = 1 THEN
            buff := buff || rec.TABLE_NAME || '(';
            is_write_table_name := 0;
        END IF;
        buff := buff || rec.COLUMN_NAME || ', ';
    END LOOP;

    buff := RTRIM(buff, ', ');
    buff := buff || ')';
    IF del_rule != 'NO ACTION' THEN
        buff := buff || ' ON DELETE ' || del_rule;
    END IF;
    RETURN buff;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND in get_fk_description()');
            RETURN NULL;
    WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Unknown error in get_fk_description()');
            RETURN NULL;
END get_fk_description;


SELECT get_not_fk_constraint_desription('DEVELOPMENT', 'mydevtabel_pk') FROM dual;

CREATE OR REPLACE FUNCTION get_not_fk_constraint_desription(schema_name IN VARCHAR2, constr_name IN VARCHAR2) RETURN VARCHAR2
IS
    CURSOR cur_get_col IS
    SELECT COLUMN_NAME FROM ALL_CONS_COLUMNS
    WHERE OWNER = UPPER(schema_name) AND CONSTRAINT_NAME = UPPER(constr_name)
    ORDER BY POSITION;
    constr_type VARCHAR2(1);
    search_cond LONG;
    buff VARCHAR2(300);
BEGIN
    SELECT CONSTRAINT_TYPE, SEARCH_CONDITION INTO constr_type, search_cond FROM ALL_CONSTRAINTS
    WHERE OWNER = UPPER(schema_name) AND CONSTRAINT_NAME = UPPER(constr_name)
    FETCH FIRST 1 ROWS ONLY;

    buff := 'CONSTRAINT ' || constr_name;

    CASE constr_type
        WHEN 'P' THEN
            BEGIN
                buff := buff || ' PRIMARY KEY(';
                for rec in cur_get_col LOOP
                    buff := buff || rec.COLUMN_NAME || ', ';
                END LOOP;
                buff := RTRIM(buff, ', ');
                buff := buff || ')';
            END;
        WHEN 'U' THEN
            BEGIN
                buff := buff ||' UNIQUE(';
                for rec in cur_get_col LOOP
                    buff := buff || rec.COLUMN_NAME || ', ';
                END LOOP;
                buff := RTRIM(buff, ', ');
                buff := buff || ')';
            END;
        WHEN 'C' THEN
            buff := buff || ' CHECK(' || search_cond || ')';
    END CASE;
    RETURN buff;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND in get_not_fk_constraint_desription()');
            RETURN NULL;
    WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Unknown error in get_not_fk_constraint_desription()');
            RETURN NULL;
END get_not_fk_constraint_desription;


CREATE OR REPLACE FUNCTION get_outline_constraints_description(schema_name IN VARCHAR2, tab_name IN VARCHAR2, is_create_fk_constr IN NUMBER) RETURN VARCHAR2
IS
    CURSOR cur_get_constraints IS
    SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE FROM ALL_CONSTRAINTS
    WHERE OWNER = UPPER(schema_name) AND TABLE_NAME = UPPER(tab_name) AND GENERATED != 'GENERATED NAME';
    buff VARCHAR2(5000);
BEGIN
    FOR rec in cur_get_constraints LOOP
        IF rec.CONSTRAINT_TYPE = 'R' THEN
            IF is_create_fk_constr = 1 THEN
                buff := buff || get_fk_description(schema_name, rec.CONSTRAINT_NAME) || ',' || CHR(10);
            END IF;
            ELSE
            buff := buff || get_not_fk_constraint_desription(schema_name, rec.CONSTRAINT_NAME) || ',' || CHR(10);
        END IF;
    END LOOP;
    buff := RTRIM(buff, ',' || CHR(10));
    RETURN buff;
END get_outline_constraints_description;

    CREATE TABLE TMP(
id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
my_table_id NUMBER,
tmp_val NUMBER,
CONSTRAINT fk_tmp FOREIGN KEY (my_table_id)
REFERENCES MyTable(id) ON DELETE CASCADE,
CONSTRAINT unique_tmp_val_my_table_id UNIQUE(tmp_val, my_table_id),
CONSTRAINT check_tmp_val CHECK(tmp_val > 50)
);

SELECT get_outline_constraints_description('DEVELOPMENT', 'TMP') FROM dual;

CREATE TABLE SIMPLE(
id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);

CREATE OR REPLACE FUNCTION get_outline_constraint(schema_name IN VARCHAR2, constr_name IN VARCHAR2) RETURN VARCHAR2
IS
constr_type VARCHAR2(1);
BEGIN

    SELECT CONSTRAINT_TYPE INTO constr_type FROM ALL_CONSTRAINTS
    WHERE OWNER = UPPER(schema_name) AND CONSTRAINT_NAME = UPPER(constr_name)
    FETCH FIRST 1 ROWS ONLY;

    IF constr_type = 'R' THEN
        RETURN get_fk_description(schema_name, constr_name);
    ELSE
        RETURN get_not_fk_constraint_desription(schema_name, constr_name);
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND in get_outline_constraint()');
            RETURN NULL;
    WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Unknown error in get_outline_constraint()');
            RETURN NULL;
END get_outline_constraint;


CREATE OR REPLACE PROCEDURE compare_outline_constraints(dev_scheme_name IN VARCHAR2, prod_scheme_name IN VARCHAR2, tab_name IN VARCHAR2)
IS
    CURSOR cur_get_constr_name IS
    SELECT * FROM
    ((SELECT CONSTRAINT_NAME dev_constr_name FROM ALL_CONSTRAINTS
    WHERE OWNER = UPPER(dev_scheme_name) AND TABLE_NAME = UPPER(tab_name) AND GENERATED != 'GENERATED NAME') dev
    FULL OUTER JOIN
    (SELECT CONSTRAINT_NAME prod_constr_name FROM ALL_CONSTRAINTS
    WHERE OWNER = UPPER(prod_scheme_name) AND TABLE_NAME = UPPER(tab_name) AND GENERATED != 'GENERATED NAME') prod
    ON dev.dev_constr_name = prod.prod_constr_name);
BEGIN
    FOR rec in cur_get_constr_name LOOP
        IF rec.dev_constr_name IS NULL THEN
            DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || UPPER(tab_name) || ' DROP CONSTRAINT ' || rec.prod_constr_name || ';');
        ELSIF rec.prod_constr_name IS NULL THEN
            DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || UPPER(tab_name) || ' ADD ' || get_outline_constraint(dev_scheme_name, rec.dev_constr_name) || ';');
        ELSE
            IF get_outline_constraint(dev_scheme_name, rec.dev_constr_name) != get_outline_constraint(prod_scheme_name, rec.prod_constr_name) THEN
                DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || UPPER(tab_name) || ' DROP CONSTRAINT ' || rec.prod_constr_name || ';');
                DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || UPPER(tab_name) || ' ADD ' || get_outline_constraint(dev_scheme_name, rec.dev_constr_name) || ';');
            END IF;
        END IF;
    END LOOP;
END compare_outline_constraints;


CREATE OR REPLACE PROCEDURE compare_tables(dev_scheme_name IN VARCHAR2, prod_scheme_name IN VARCHAR2)
IS
    CURSOR get_table_name IS
    SELECT * FROM
        ((SELECT TABLE_NAME dev_name FROM ALL_TABLES
        WHERE OWNER = UPPER(dev_scheme_name)) dev
        FULL OUTER JOIN
        (SELECT TABLE_NAME prod_name FROM ALL_TABLES
        WHERE OWNER = UPPER(prod_scheme_name)) prod
        ON dev.dev_name = prod.prod_name);

BEGIN
    FOR rec IN get_table_name LOOP
        IF rec.dev_name IS NULL THEN
            DBMS_OUTPUT.PUT_LINE('DROP TABLE ' || rec.prod_name || ';');
        ELSIF rec.prod_name IS NULL THEN
            INSERT INTO TABLES_TO_CREATE(owner, table_name) VALUES(dev_scheme_name, rec.dev_name);
        ELSE
            compare_table_structure(dev_scheme_name, prod_scheme_name, rec.dev_name);
            compare_outline_constraints(dev_scheme_name, prod_scheme_name, rec.dev_name);
        END IF;
    END LOOP;
    create_all_tables(dev_scheme_name);
END compare_tables;

    SELECT * FROM
    (SELECT NAME dev_name, UPPER(TRIM(' ' FROM (TRANSLATE(text, CHR(10) || CHR(13), ' ')))) dev_text
    FROM ALL_SOURCE WHERE OWNER = UPPER('DEVELOPMENT') AND TYPE = UPPER('FUNCTION')) dev
    FULL OUTER JOIN
    (SELECT NAME prod_name, UPPER(TRIM(' ' FROM (TRANSLATE(text, CHR(10) || CHR(13), ' ')))) prod_text
    FROM ALL_SOURCE WHERE OWNER = UPPER('PRODUCTION') AND TYPE = UPPER('FUNCTION')) prod
    ON dev.dev_name = prod.prod_name;

CREATE OR REPLACE PROCEDURE compare_callables(dev_scheme_name IN VARCHAR2, prod_scheme_name IN VARCHAR2, obj_type IN VARCHAR2)
IS
CURSOR cur_get_call IS
    SELECT * FROM
    (SELECT DISTINCT NAME dev_name
    FROM ALL_SOURCE WHERE OWNER = UPPER(dev_scheme_name) AND TYPE = UPPER(obj_type)) dev
    FULL JOIN
    (SELECT DISTINCT NAME prod_name
    FROM ALL_SOURCE WHERE OWNER = UPPER(prod_scheme_name) AND TYPE = UPPER(obj_type)) prod
    ON dev.dev_name = prod.prod_name;
BEGIN
    FOR rec IN cur_get_call LOOP
        DBMS_OUTPUT.PUT_LINE('DEV name: ' || rec.dev_name ||' PROD NAME: ' || rec.prod_name);
        IF rec.dev_name IS NULL THEN
            DBMS_OUTPUT.PUT_LINE('DROP ' || UPPER(obj_type) || ' ' || UPPER(rec.prod_name) || ';');
        ELSIF rec.prod_name IS NULL THEN
            add_object(dev_scheme_name, obj_type, rec.dev_name);
        ELSIF get_callable_text(dev_scheme_name, obj_type, rec.dev_name) != get_callable_text(prod_scheme_name, obj_type, rec.prod_name) THEN
            DBMS_OUTPUT.PUT_LINE('DROP ' || UPPER(obj_type) || UPPER(rec.prod_name) || ';');
            add_object(dev_scheme_name, obj_type, rec.dev_name);
        END IF;
    END LOOP;
END compare_callables;

call compare_callables('DEVELOPMENT', 'PRODUCTION', 'FUNCTION');

CREATE OR REPLACE PROCEDURE add_object(dev_scheme_name VARCHAR2, object_type VARCHAR2, object_name VARCHAR2)
IS
CURSOR get_object IS
    SELECT TRIM(' ' FROM (TRANSLATE(text, CHR(10) || CHR(13), ' '))) AS obj_text
    FROM all_source
    WHERE owner = UPPER(dev_scheme_name)
    AND name = UPPER(object_name) AND type = UPPER(object_type);
check_var VARCHAR2(1000);
BEGIN
    OPEN get_object;
    FETCH get_object INTO check_var;
    CLOSE get_object;
    IF check_var IS NULL THEN
        RETURN;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Check var: ' || check_var);
    DBMS_OUTPUT.PUT_LINE('CREATE OR REPLACE ');
    FOR rec IN get_object
    LOOP
        DBMS_OUTPUT.PUT_LINE(rec.obj_text);
    END LOOP;
END add_object;


CREATE OR REPLACE FUNCTION get_callable_text(scheme_name IN VARCHAR2, obj_type IN VARCHAR2, obj_name IN VARCHAR2) RETURN VARCHAR2
IS
    CURSOR cur_get_text IS
        SELECT UPPER(TRIM(' ' FROM (TRANSLATE(text, CHR(10) || CHR(13), ' ')))) obj_text
        FROM ALL_SOURCE
        WHERE OWNER = UPPER(scheme_name) AND NAME = UPPER(obj_name)
        AND TYPE = UPPER(obj_type) AND TEXT != chr(10);

    call_text VARCHAR2(32000) := '';
BEGIN
      FOR rec in cur_get_text LOOP
        call_text := call_text || rec.obj_text;
      END LOOP;
      RETURN call_text;
END get_callable_text;

CREATE OR REPLACE FUNCTION ret_num(num NUMBER) RETURN NUMBER
IS
BEGIN
    RETURN num;
END ret_num;

CREATE OR REPLACE PROCEDURE compare_functions(dev_scheme_name IN VARCHAR2, prod_scheme_name IN VARCHAR2)
IS
BEGIN
    compare_callables(dev_scheme_name, prod_scheme_name, 'FUNCTION');
END compare_functions;

CREATE OR REPLACE PROCEDURE compare_procedures(dev_scheme_name IN VARCHAR2, prod_scheme_name IN VARCHAR2)
IS
BEGIN
    compare_callables(dev_scheme_name, prod_scheme_name, 'PROCEDURE');
END compare_procedures;
