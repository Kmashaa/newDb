--Task1

--create users and tables
alter session set "_ORACLE_SCRIPT"=true;

create user development identified by development;
grant all privileges to development;
drop user development;

create user production identified by production;
grant all privileges to production;
drop user production;


create table development.MyTable
(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    val number,
    my_dev_table_id NUMBER,
    constraint mytable_pk primary key(id)
);

create table development.MyDevTable(
    id number generated by default as identity,
    val number,
    my_table_id number,
    constraint mydevtabel_pk primary key(id),
    constraint fk_my_table foreign key (my_table_id) references MYTABLE(id)
);

alter table DEVELOPMENT.MYTABLE add constraint fk_my_dev_table foreign key (my_dev_table_id ) references MYDEVTABLE(id);

create table PRODUCTION.MyTable
(
    id number generated by default as identity,
    val number,
    my_dev_table_id number,
    constraint mytable_pk primary key(id)
);


--compare tables by name
SELECT TABLE_NAME FROM ALL_TABLES WHERE OWNER = 'DEVELOPMENT' AND TABLE_NAME NOt IN (
SELECT TABLE_NAME FROM All_TABLES WHERE OWNER = 'PRODUCTION');

CREATE OR REPLACE FUNCTION development.table_exists(scheme_name IN VARCHAR, tab_name IN VARCHAR) RETURN BOOLEAN
IS
    num NUMBER;
BEGIN
    SELECT COUNT(TABLE_NAME) INTO num FROM ALL_TABLES WHERE OWNER = UPPER(scheme_name) AND TABLE_NAME = UPPER(tab_name);
    IF num > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END;


CREATE OR REPLACE PROCEDURE compare_schemes(dev_scheme_name IN VARCHAR2, prod_scheme_name IN VARCHAR2)
IS
    CURSOR get_table_name IS
    SELECT TABLE_NAME FROM ALL_TABLES
    WHERE OWNER = UPPER(dev_scheme_name);
BEGIN
    FOR table_name IN get_table_name LOOP
        IF NOT table_exists(prod_scheme_name, table_name.TABLE_NAME) THEN
            DBMS_OUTPUT.PUT_LINE('Add table ' || table_name.TABLE_NAME||';');
            CONTINUE;
        END IF;


    END LOOP;
END;

call compare_schemes('DEVELOPMENT', 'PRODUCTION');


--compare tables by structure
SELECT CONSTRAINT_NAME FROM ALL_CONS_COLUMNS WHERE OWNER = 'DEVELOPMENT' AND TABLE_NAME = 'MYTABLE' AND (COLUMN_NAME = 'ID' OR COLUMN_NAME ='MY_DEV_TABLE_ID');
select * from ALL_CONSTRAINTS;

SELECT * FROM(
    (SELECT CONSTRAINT_NAME FROM ALL_CONS_COLUMNS WHERE OWNER = 'DEVELOPMENT'
    AND TABLE_NAME = 'MYTABLE' AND COLUMN_NAME = 'MY_DEV_TABLE_ID'));

CREATE OR REPLACE FUNCTION get_inline_constraint_description(scheme_name IN VARCHAR2, tab_name IN VARCHAR2, col_name IN VARCHAR2) RETURN boolean
IS
CURSOR cur_get_inl_constraint IS
SELECT * FROM(
    (SELECT CONSTRAINT_NAME FROM ALL_CONS_COLUMNS WHERE OWNER = UPPER(scheme_name)
    AND TABLE_NAME = UPPER(tab_name) AND COLUMN_NAME = UPPER(col_name)) l
INNER JOIN
(SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, SEARCH_CONDITION FROM ALL_CONSTRAINTS
WHERE OWNER = UPPER(scheme_name) AND TABLE_NAME = UPPER(tab_name) AND GENERATED = 'GENERATED NAME') r
ON l.CONSTRAINT_NAME = r.CONSTRAINT_NAME);
BEGIN
    for const_name in cur_get_inl_constraint loop
        DBMS_OUTPUT.PUT_LINE('hi');
        continue;
    end loop;
    return TRUE;
end;



CREATE OR REPLACE FUNCTION get_col_description(scheme_name IN VARCHAR2, tab_name IN VARCHAR2, col_name IN VARCHAR2) RETURN VARCHAR2
IS
CURSOR cur_get_col IS
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, NULLABLE, DATA_DEFAULT
FROM ALL_TAB_COLUMNS
WHERE OWNER = UPPER(scheme_name) AND TABLE_NAME = UPPER(tab_name) AND COLUMN_NAME = UPPER(col_name);
col_descriptioin VARCHAR2(500) := '';
BEGIN

for rec IN cur_get_col LOOP
    col_descriptioin := rec.COLUMN_NAME || ' ' || rec.DATA_TYPE;

    IF rec.NULLABLE = 'N' THEN
        col_descriptioin := col_descriptioin || ' NOT NULL';
    END IF;
END LOOP;
END;


CREATE OR REPLACE PROCEDURE compare_table_structure(dev_scheme_name IN VARCHAR2, prod_scheme_name IN VARCHAR2, tab_name IN VARCHAR2)
IS
CURSOR cur_get_columns IS
SELECT * FROM
((SELECT COLUMN_NAME dev_col_name FROM ALL_TAB_COLUMNS
WHERE OWNER = UPPER(dev_scheme_name) AND TABLE_NAME = UPPER(tab_name)) dev
FULL OUTER JOIN
(SELECT COLUMN_NAME prod_col_name FROM ALL_TAB_COLUMNS
WHERE OWNER = UPPER(prod_scheme_name) AND TABLE_NAME = UPPER(tab_name)) prod
ON dev.dev_col_name = prod.prod_col_name);
BEGIN
FOR rec IN cur_get_columns LOOP
    IF rec.dev_col_name IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || tab_name || ' DROP COLUMN ' || rec.prod_col_name || ';');
    ELSIF rec.prod_col_name IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || tab_name || ' ADD COLUMN ' || rec.dev_col_name || ';');
    END IF;
END LOOP;
END;

call compare_table_structure('DEVELOPMENT','PRODUCTION','MYDEVTABLE');
