--1
create table MyTable
(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    val NUMBER
);

--2
declare
    i number;
begin
    for i in 1 .. 10000
    loop
        INSERT INTO MyTable(val) VALUES (dbms_random.random);
    end loop;
end;

--3
create or replace function compare return varchar2
is
even number := 0;
odd  number := 0;
RES VARCHAR2(10);
begin
    select count(val) into even from MYTABLE where mod(val,2)=0;
    select count(val) into odd from MYTABLE where mod(val,2)!=0;
    if even > odd then
        RES:= 'TRUE';
    ELSIF ODD > EVEN THEN
        RES:= 'FALSE';
    ELSE
        RES:= 'EQUAL';
    end if;
RETURN (RES);
END compare;

select compare from dual;

--4
create or replace function generate_input(id_from_table in integer) return varchar2
is
res varchar2(50) :='insert into MyTable(val) values (';
value number;
incorrect_id exception;
begin
    select val into value from MyTable where id = id_from_table;
    if(value is null) then
        raise incorrect_id;
    end if;
    res := res || to_char(value) || ');';
    dbms_output.PUT_LINE(res);
    return(res);

    exception
    when no_data_found then
    begin
        dbms_output.put_line('incorrect id');
        return(0);
    end;

    when incorrect_id then
    begin
        dbms_output.put_line('incorrect id');
        return(0);
    end;
end;

select generate_input(50000) from dual;

--5
create or replace procedure insert_value(value in number) is
begin
    insert into MyTable(val) values(value);
end;

create or replace procedure update_value(id_from_table in number, value in number) is
begin
    update MyTable set val=value where id=id_from_table;
end;

create or replace procedure delete_value(id_from_table in number) is
begin
    delete from MyTable where id=id_from_table;
end;


call insert_value(1);

--6
create or replace function calculate_total_remuneration(monthly_salary in number, annual_bonus_percentage in number)
return number
is
res number;
negative_monthly_salary exception;
null_monthly_salary exception;
negative_bonus_percentage exception;
null_bonus_percentage exception;
begin
    if(monthly_salary<0) then
        raise negative_monthly_salary;
    end if;

    if(annual_bonus_percentage<0) then
        raise negative_bonus_percentage;
    end if;

    if(monthly_salary is null) then
        raise null_monthly_salary;
    end if;

    if(annual_bonus_percentage is null) then
        raise null_bonus_percentage;
    end if;

    res := (1+annual_bonus_percentage/100)*12*monthly_salary;
    dbms_output.put_line(res);
    return (res);

    exception
    when negative_monthly_salary then
    begin
        dbms_output.put_line('Negative monthly salary');
        return(0);
    end;

    when negative_bonus_percentage then
    begin
        dbms_output.put_line('Negative bonus percentage');
        return(0);
    end;

    when null_monthly_salary then
    begin
        dbms_output.put_line('Null monthly salary');
        return(0);
    end;

    when null_bonus_percentage then
    begin
        dbms_output.put_line('Null bonus percentage');
        return(0);
    end;
end calculate_total_remuneration;

select calculate_total_remuneration(1000,-5) from dual;